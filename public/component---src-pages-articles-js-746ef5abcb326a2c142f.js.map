{"version":3,"file":"component---src-pages-articles-js-746ef5abcb326a2c142f.js","mappings":"uIAgFA,IA7EcA,IAAsC,IAArC,MAAEC,EAAK,aAAEC,GAAe,GAAOF,EAC5C,SAASG,EAAWC,GAClB,MAAMC,EAAa,IAAIC,KAAKF,GAC5B,OAAUC,EAAWE,aAAY,IAAIF,EAAWG,eAAe,UAAW,CACxEC,MAAO,SAEX,CAGA,GAAIP,EAAc,CAChB,MAAMQ,EAAc,CAAC,EAErBT,EAAMU,SAASC,IACb,MAAMC,EAAO,IAAIP,KAAKM,EAAKE,YAAYV,MAAMW,cAAcC,WAC3DN,EAAYG,GAAK,GAAAI,QAAAC,EAAAA,EAAAA,GAAQR,EAAYG,IAAS,IAAI,CAACD,GAAK,IAK1D,OAFcO,OAAOC,KAAKV,GAAaW,UAE1BC,KAAKT,GAChBU,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,MACEC,UAAU,iEACVC,IAAKZ,GAEJA,GAEHU,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAAA,UACGb,EAAYG,GAAMS,KAAKI,GACtBH,EAAAA,cAAA,MAAIC,UAAU,0EACZD,EAAAA,cAAA,WAASE,IAAKC,EAAKC,IACjBJ,EAAAA,cAACK,EAAAA,KAAI,CACHC,GAAE,GAAKH,EAAKI,OAAOC,KACnBP,UAAU,qCAEVD,EAAAA,cAAA,MAAIC,UAAU,uGACXE,EAAKZ,YAAYkB,OAEpBT,EAAAA,cAAA,QAAMC,UAAU,4DACbrB,EAAWuB,EAAKZ,YAAYV,gBAUjD,CACE,OACEmB,EAAAA,cAAA,WACEA,EAAAA,cAAA,UACGtB,EAAMqB,KAAKI,GACVH,EAAAA,cAAA,MAAIC,UAAU,0EACZD,EAAAA,cAAA,WAASE,IAAKC,EAAKC,IACjBJ,EAAAA,cAACK,EAAAA,KAAI,CACHC,GAAE,GAAKH,EAAKI,OAAOC,KACnBP,UAAU,qCAEVD,EAAAA,cAAA,MAAIC,UAAU,uGACXE,EAAKZ,YAAYkB,OAEpBT,EAAAA,cAAA,QAAMC,UAAU,4DACbrB,EAAWuB,EAAKZ,YAAYV,aAS/C,C,sHCtEF,MA2Ca6B,EAAOA,IAAMV,EAAAA,cAACW,EAAAA,EAAG,CAACF,MAAO,aAEtC,UA7CoBhC,IAAe,IAAd,KAAEmC,GAAMnC,EAC3B,MAAMC,EAAQkC,EAAKC,kBAAkBC,MAC/BC,EAAOH,EAAKC,kBAAkBG,SAEpC,OACEhB,EAAAA,cAACiB,EAAAA,EAAM,KACLjB,EAAAA,cAAA,eACEA,EAAAA,cAAA,OAAKC,UAAU,qBACbD,EAAAA,cAAA,MAAIC,UAAU,oEAAmE,YAGjFD,EAAAA,cAAA,MAAIC,UAAU,mDAAkD,QAChED,EAAAA,cAAA,OAAKC,UAAU,cACbD,EAAAA,cAACkB,EAAAA,EAAI,CAACH,KAAMA,KAEdf,EAAAA,cAACmB,EAAAA,EAAK,CAACzC,MAAOA,EAAOC,cAAc,MAGhC,C","sources":["webpack://fbraza/./src/components/Posts.jsx","webpack://fbraza/./src/pages/articles.js"],"sourcesContent":["import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst Posts = ({ posts, groupByYears = false }) => {\n  function formatDate(date) {\n    const properDate = new Date(date)\n    return `${properDate.getUTCDate()} ${properDate.toLocaleString(\"default\", {\n      month: \"short\",\n    })}`\n  }\n\n  //   Re-organise if grouping by year\n  if (groupByYears) {\n    const postsByYear = {}\n\n    posts.forEach((post) => {\n      const year = new Date(post.frontmatter.date).getFullYear().toString()\n      postsByYear[year] = [...(postsByYear[year] || []), post]\n    })\n\n    const years = Object.keys(postsByYear).reverse()\n\n    return years.map((year) => (\n      <>\n        <h2\n          className=\"text-3xl font-semibold mb-8 text-slate-900 dark:text-slate-300\"\n          key={year}\n        >\n          {year}\n        </h2>\n        <div className=\"mb-12\">\n          <ul>\n            {postsByYear[year].map((node) => (\n              <li className=\"py-4 border-b border-gray-200 last:border-hidden dark:border-slate-700\">\n                <article key={node.id}>\n                  <Link\n                    to={`${node.fields.slug}`}\n                    className=\"flex justify-between items-center\"\n                  >\n                    <h2 className=\"text-lg text-slate-800 hover:text-blue-600 font-medium dark:text-slate-300 dark:hover:text-blue-500\">\n                      {node.frontmatter.title}\n                    </h2>\n                    <time className=\"text-sm text-slate-400 font-semibold dark:text-slate-500\">\n                      {formatDate(node.frontmatter.date)}\n                    </time>\n                  </Link>\n                </article>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </>\n    ))\n  } else {\n    return (\n      <div>\n        <ul>\n          {posts.map((node) => (\n            <li className=\"py-4 border-b border-gray-200 last:border-hidden dark:border-slate-700\">\n              <article key={node.id}>\n                <Link\n                  to={`${node.fields.slug}`}\n                  className=\"flex justify-between items-center\"\n                >\n                  <h2 className=\"text-lg text-slate-800 hover:text-blue-600 font-medium dark:text-slate-300 dark:hover:text-blue-500\">\n                    {node.frontmatter.title}\n                  </h2>\n                  <time className=\"text-sm text-slate-400 font-semibold dark:text-slate-500\">\n                    {formatDate(node.frontmatter.date)}\n                  </time>\n                </Link>\n              </article>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Posts\n","import { graphql } from \"gatsby\"\nimport * as React from \"react\"\nimport Posts from \"../components/Posts\"\nimport Tags from \"../components/Tags\"\nimport Layout from \"../components/Layout\"\nimport { Seo } from \"../components/Seo\"\n\nconst ArticlePage = ({ data }) => {\n  const posts = data.allMarkdownRemark.nodes\n  const tags = data.allMarkdownRemark.distinct\n\n  return (\n    <Layout>\n      <section>\n        <div className=\"container mx-auto\">\n          <h1 className=\"mb-12 text-5xl font-extrabold tracking-tight dark:text-slate-300\">\n            Articles\n          </h1>\n          <h2 className=\"text-3xl font-semibold mb-8 dark:text-slate-300\">Tags</h2>\n          <div className=\"flex mb-12\">\n            <Tags tags={tags} />\n          </div>\n          <Posts posts={posts} groupByYears={true} />\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { fields: { contentType: { eq: \"post\" } } }\n    ) {\n      nodes {\n        frontmatter {\n          date\n          title\n        }\n        id\n        fields {\n          slug\n        }\n      }\n      distinct(field: { frontmatter: { tags: SELECT } })\n    }\n  }\n`\n\nexport const Head = () => <Seo title={\"Articles\"}/>\n\nexport default ArticlePage\n"],"names":["_ref","posts","groupByYears","formatDate","date","properDate","Date","getUTCDate","toLocaleString","month","postsByYear","forEach","post","year","frontmatter","getFullYear","toString","concat","_toConsumableArray","Object","keys","reverse","map","React","className","key","node","id","Link","to","fields","slug","title","Head","Seo","data","allMarkdownRemark","nodes","tags","distinct","Layout","Tags","Posts"],"sourceRoot":""}