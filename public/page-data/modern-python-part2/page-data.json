{"componentChunkName":"component---src-templates-post-js","path":"/modern-python-part2/","result":{"data":{"markdownRemark":{"html":"<p>Good software engineering practices always bring a lot of long-term benefits. For example, writing unit tests permits you to maintain large codebases and ensures that a specific piece of your code behaves as expected. Writing consistent Git commits also enhance the collaboration between the project stakeholders. Well-crafted Git commit messages open the door to automatic versioning and generated change log files. Consequently, a lot of attempts are currently ongoing and applied to normalize the messages written in our Git commits.</p>\n<p>In the first part of this serie, we setup, our project by installing different Python versions with <code>pyenv</code>, setting a local version of Python with <code>pyenv</code>, encapsulating it into a virtual environment with <code>poetry</code>. Here we show more precisely how to unit test your Python application and how to enforce and validate your Git commit messages. The source code associated with this article is published on <a href=\"https://github.com/adaltas/summarize_dataframe\">GitHub</a>.</p>\n<h2 id=\"testing-our-code\" style=\"position:relative;\"><a href=\"#testing-our-code\" aria-label=\"testing our code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing our code</h2>\n<p>The project is a simple python function that summarizes data present in a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\">pandas DataFrame</a>. The function outputs the number of rows and columns and the frequency of each data types present in the pandas DataFrame:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">---- Data Summary ------</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                       Values</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Number of rows          230</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Number of columns         9</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">float64                   3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">int64                     4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">object                    2</span></span></span></code></pre>\n<p>Go to your project root directory and activate your virtual environment:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry shell</span></span></span></code></pre>\n<p>We add a couple of dependencies using poetry:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry add -D pynvim numpy pandas</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Using version ^0.4.3 </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> pynvim</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Using version ^1.20.2 </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> numpy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Using version ^1.2.3 </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> pandas</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Updating dependencies</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Resolving dependencies... (1.4s)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Writing lock file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Package operations: 8 installs, 0 updates, 0 removals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing six (1.15.0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing greenlet (1.0.0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing msgpack (1.0.2)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing numpy (1.20.2)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing python-dateutil (2.8.1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing pytz (2021.1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing pandas (1.2.3)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing pynvim (0.4.3)</span></span></span></code></pre>\n<p>The <code>-D</code> flag indicates that the dependency only apply to development environments.</p>\n<blockquote>\n<p>Note: I personally use NeoVim for coding that is why I need the <code>pynvim</code>  package to support NeoVim python plugins.</p>\n</blockquote>\n<p>Based on the expected output defined above, our program is made of three steps:</p>\n<ol>\n<li>Getting the shape of the pandas DataFrame.</li>\n<li>Getting the pandas <code>dtypes</code> frequency.</li>\n<li>Concatenating the two results into a unified DataFrame that we will use to output the final result.</li>\n</ol>\n<p>Once the final DataFrame is obtained we output the result as depicted above. In this regard our code scaffold could look as the following:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"python\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> pandas </span><span class=\"mtk3\">as</span><span class=\"mtk1\"> pd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">data_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; </span><span class=\"mtk5\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    Function defined to return a DataFrame containing details</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    about the number of rows and columns and the column dtype</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    frequency of the passed pandas DataFrame</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_shape</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; </span><span class=\"mtk5\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        Function defined to return a dataframe with details about</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        the number of row and columns</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> </span><span class=\"mtk5\">None</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_dtypes_freq</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; </span><span class=\"mtk5\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        Function defined to return a dataframe with details about</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        the pandas dtypes frequency</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> </span><span class=\"mtk5\">None</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">display_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; </span><span class=\"mtk5\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    Function define to print out the result of the data summary</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result_df = </span><span class=\"mtk5\">True</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    message = </span><span class=\"mtk7\">&#39;---- Data summary ----&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">print</span><span class=\"mtk1\">(message, result_df, </span><span class=\"mtk9\">sep</span><span class=\"mtk1\">=</span><span class=\"mtk7\">&#39;</span><span class=\"mtk6\">\\n</span><span class=\"mtk7\">&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>Let's now start writing our unit tests. We are going to use the <code>unittest</code> tool available with the Python standard library. You may remember in the previous article that <a href=\"https://docs.pytest.org/en/stable/contents.html\">pytest</a> was defined as a developer dependency for testing. It is not an issue with <code>pytest</code> because it natively runs tests written with the <code>unittest</code> library.</p>\n<p>Unit tests are single methods that <code>unittest</code> expects you to write inside Python classes. Choose a descriptive name for your test classes and methods. The name of your test methods should start with <code>test_</code>.  Additionally, <code>unittest</code> uses a series of special assertion methods inherited from the <code>unittest.TestCase</code> class. In practice, a test should precisely cover one feature, be autonomous without requiring external cues, and should recreate the conditions of their success.</p>\n<p>To recreate the necessary environment, setup code must be written. If this code happens to be redundant, implements a <code>setUp()</code> method, that will be executed before every single test. This is pretty convenient to re-use and re-organize your code. Depending on your use case you may have to perform systematic operations after the tests ran. For that, you may use the <code>tearDown()</code> method.</p>\n<p>First you can read below the unit test we implemented for the <code>data_summary()</code> function:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"python\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> unittest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> pandas </span><span class=\"mtk3\">as</span><span class=\"mtk1\"> pd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">from</span><span class=\"mtk1\"> summarize_dataframe.summarize_df </span><span class=\"mtk3\">import</span><span class=\"mtk1\"> data_summary</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtki\">TestDataSummary</span><span class=\"mtk1\">(</span><span class=\"mtk13\">unittest</span><span class=\"mtk1\">.</span><span class=\"mtk13\">TestCase</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">setUp</span><span class=\"mtk1\">(</span><span class=\"mtk9\">self</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4 mtki\"># initialize dataframe to test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        df_data = [[</span><span class=\"mtk5\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;a&#39;</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;b&#39;</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;c&#39;</span><span class=\"mtk1\">]]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        df_cols = [</span><span class=\"mtk7\">&#39;numbers&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;letters&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.df = pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=df_data, </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=df_cols)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4 mtki\"># initialize expected dataframe</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        exp_col = [</span><span class=\"mtk7\">&#39;Values&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        exp_idx = [</span><span class=\"mtk7\">&#39;Number of rows&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;Number of columns&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;int64&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;object&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        exp_data = [[</span><span class=\"mtk5\">3</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">2</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">1</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">1</span><span class=\"mtk1\">]]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.exp_df = pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=exp_data, </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=exp_col, </span><span class=\"mtk9\">index</span><span class=\"mtk1\">=exp_idx)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">test_data_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">self</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        expected_df = self.exp_df</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        result_df = data_summary(self.df)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.assertTrue(expected_df.equals(result_df))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">if</span><span class=\"mtk1\"> </span><span class=\"mtk10\">__name__</span><span class=\"mtk1\"> </span><span class=\"mtk10\">==</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&#39;__main__&#39;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    unittest.main()</span></span></span></code></pre>\n<p>The <code>setUp()</code> method initializes two distinct pandas DataFrame. <code>self.exp_df</code> is the resulting DataFrame we expect to get after calling the <code>data_summary()</code> function and <code>self.df</code> is the one used to test our functions. At the moment, tests are expected to fail. The logic has not been implemented. To test with <code>poetry</code> use the command:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry run pytest -v</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">============================================== </span><span class=\"mtk8\">test</span><span class=\"mtk1\"> session starts ==============================</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">platform linux -- Python 3.8.7, pytest-5.4.3, py-1.10.0, pluggy-0.13.1 -- /home/fbraza/.cache/pypoetry/virtualenvs/summarize-dataframe-SO-g_7pj-py3.8/bin/python</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cachedir: .pytest_cache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">rootdir: /home/fbraza/Documents/python_project/summarize_dataframe</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">collected 1 item</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">tests/test_summarize_dataframe.py::TestDataSummary::test_data_summary FAILED [100%]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=============================================== FAILURES =========================================</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">___________________________________TestDataSummary.test_data_summary _____________________________</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">self = &lt;tests.test_summarize_dataframe.TestDataSummary testMethod=test_data_summary&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    def test_data_summary(self):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        expected_df = self.exp_df</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        result_df = data_summary(self.df)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;       self.assertTrue(expected_df.equals(result_df))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">E       AssertionError: False is not </span><span class=\"mtk8\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">tests/test_summarize_dataframe.py:26: AssertionError</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">============================================== short </span><span class=\"mtk8\">test</span><span class=\"mtk1\"> summary info =============================</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FAILED tests/test_summarize_dataframe.py::TestDataSummary::test_data_summary - AssertionError: False is not </span><span class=\"mtk8\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">============================================== 1 failed </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> 0.32s ===================================</span></span></span></code></pre>\n<p>Using the <code>-v</code> flag returns a more verbose output for your test results. You can see that your tests are labeled according to the classes and functions names you gave (i.e., <code>&#x3C;test_module.py>::&#x3C;class>::&#x3C;test_method></code>).</p>\n<p>The code is updated to conform with the unit tests:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"python\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> pandas </span><span class=\"mtk3\">as</span><span class=\"mtk1\"> pd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">data_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; pd.DataFrame:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    Function defined to output details about the number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    of rows and columns and the column dtype frequency of</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    the passed pandas DataFrame</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_shape</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; pd.DataFrame:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        Function defined to return a dataframe with details about</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        the number of row and columns</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        row, col = df.shape</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=[[row], [col]], </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=[</span><span class=\"mtk7\">&#39;Values&#39;</span><span class=\"mtk1\">], </span><span class=\"mtk9\">index</span><span class=\"mtk1\">=[</span><span class=\"mtk7\">&#39;Number of rows&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;Number of columns&#39;</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_dtypes_freq</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; pd.DataFrame:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        Function defined to return a dataframe with details about</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        the pandas dtypes frequency</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        counter, types = {}, df.dtypes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> dtype </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> types:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            tmp = </span><span class=\"mtk10\">str</span><span class=\"mtk1\">(dtype)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">if</span><span class=\"mtk1\"> tmp </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> counter.keys():</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                counter[tmp] += </span><span class=\"mtk5\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">else</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                counter[tmp] = </span><span class=\"mtk5\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        values = [[value] </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> value </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> counter.values()]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=values, </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=[</span><span class=\"mtk7\">&#39;Values&#39;</span><span class=\"mtk1\">], </span><span class=\"mtk9\">index</span><span class=\"mtk1\">=</span><span class=\"mtk10\">list</span><span class=\"mtk1\">(counter.keys()))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result_df = pd.concat([_shape(df), _dtypes_freq(df)])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> result_df</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">display_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; </span><span class=\"mtk5\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    Function define to print out the result of the data summary</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result_df = </span><span class=\"mtk5\">True</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    message = </span><span class=\"mtk7\">&#39;---- Data summary ----&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">print</span><span class=\"mtk1\">(message, result_df, </span><span class=\"mtk9\">sep</span><span class=\"mtk1\">=</span><span class=\"mtk7\">&#39;</span><span class=\"mtk6\">\\n</span><span class=\"mtk7\">&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>Run our test again:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry run pytest -v</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=============================================== </span><span class=\"mtk8\">test</span><span class=\"mtk1\"> session starts ===============================================================</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">platform linux -- Python 3.8.7, pytest-5.4.3, py-1.10.0, pluggy-0.13.1 -- /home/fbraza/.cache/pypoetry/virtualenvs/summarize-dataframe-SO-g_7pj-py3.8/bin/python</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cachedir: .pytest_cache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">rootdir: /home/fbraza/Documents/python_project/summarize_dataframe</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">collected 1 item</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">tests/test_summarize_dataframe.py::TestDataSummary::test_data_summary PASSED [100%]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=============================================== 1 passed </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> 0.28s =================================================================</span></span></span></code></pre>\n<p>One last thing here. In our tests, we did not test the actual output. Our module is designed to output a string representation of our DataFrame summary. There are solutions to achieve this goal with <code>unittest</code>. However we are going to use <code>pytest</code> for this test. Surprising isn't it? As said before <code>pytest</code> interpolates very well with <code>unittest</code> and we are going to illustrate it now. Here the code for this test:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"python\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> unittest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> pytest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> pandas </span><span class=\"mtk3\">as</span><span class=\"mtk1\"> pd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">from</span><span class=\"mtk1\"> summarize_dataframe.summarize_df </span><span class=\"mtk3\">import</span><span class=\"mtk1\"> data_summary, display_summary</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">class</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtki\">TestDataSummary</span><span class=\"mtk1\">(</span><span class=\"mtk13\">unittest</span><span class=\"mtk1\">.</span><span class=\"mtk13\">TestCase</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">setUp</span><span class=\"mtk1\">(</span><span class=\"mtk9\">self</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4 mtki\"># initialize dataframe to test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        df_data = [[</span><span class=\"mtk5\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;a&#39;</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;b&#39;</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;c&#39;</span><span class=\"mtk1\">]]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        df_cols = [</span><span class=\"mtk7\">&#39;numbers&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;letters&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.df = pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=df_data, </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=df_cols)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4 mtki\"># initialize expected dataframe</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        exp_col = [</span><span class=\"mtk7\">&#39;Values&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        exp_idx = [</span><span class=\"mtk7\">&#39;Number of rows&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;Number of columns&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;int64&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;object&#39;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        exp_data = [[</span><span class=\"mtk5\">3</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">2</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">1</span><span class=\"mtk1\">], [</span><span class=\"mtk5\">1</span><span class=\"mtk1\">]]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.exp_df = pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=exp_data, </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=exp_col, </span><span class=\"mtk9\">index</span><span class=\"mtk1\">=exp_idx)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">@pytest.fixture</span><span class=\"mtk1\">(</span><span class=\"mtk9\">autouse</span><span class=\"mtk1\">=</span><span class=\"mtk5\">True</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_pass_fixture</span><span class=\"mtk1\">(</span><span class=\"mtk9\">self</span><span class=\"mtk1\">, </span><span class=\"mtk9\">capsys</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.capsys = capsys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">test_data_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">self</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        expected_df = self.exp_df</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        result_df = data_summary(self.df)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.assertTrue(expected_df.equals(result_df))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">test_display</span><span class=\"mtk1\">(</span><span class=\"mtk9\">self</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">print</span><span class=\"mtk1\">(</span><span class=\"mtk7\">&#39;---- Data summary ----&#39;</span><span class=\"mtk1\">, self.exp_df, </span><span class=\"mtk9\">sep</span><span class=\"mtk1\">=</span><span class=\"mtk7\">&#39;</span><span class=\"mtk6\">\\n</span><span class=\"mtk7\">&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        expected_stdout = self.capsys.readouterr()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        display_summary(self.df)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        result_stdout = self.capsys.readouterr()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        self.assertEqual(expected_stdout, result_stdout)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">if</span><span class=\"mtk1\"> </span><span class=\"mtk10\">__name__</span><span class=\"mtk1\"> </span><span class=\"mtk10\">==</span><span class=\"mtk1\"> </span><span class=\"mtk7\">&#39;__main__&#39;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    unittest.main()</span></span></span></code></pre>\n<p>Notice the decorator <code>@pytest.fixture(autouse=True)</code> and the function it encapsulates (<code>_pass_fixture</code>). In the unit test terminology, this method is called a <a href=\"https://docs.pytest.org/en/stable/fixture.html\">fixture</a>. Fixtures are functions (or methods if you use an OOP approach), which will run before each test to which it is applied. Fixtures are used to feed some data to the tests. They fill the same objective as the <code>setUp()</code> method we used before. Here we are using a predefined fixture called <code>capsys</code> to capture the standard output (<code>stdout</code>) and reuse it in our test. We can then modify our code <code>display_summary()</code> accordingly:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"python\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">import</span><span class=\"mtk1\"> pandas </span><span class=\"mtk3\">as</span><span class=\"mtk1\"> pd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">data_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; pd.DataFrame:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    Function defined to output details about the number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    of rows and columns and the column dtype frequency of</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    the passed pandas DataFrame</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_shape</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; pd.DataFrame:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        Function defined to return a dataframe with details about</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        the number of row and columns</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        row, col = df.shape</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=[[row], [col]], </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=[</span><span class=\"mtk7\">&#39;Values&#39;</span><span class=\"mtk1\">], </span><span class=\"mtk9\">index</span><span class=\"mtk1\">=[</span><span class=\"mtk7\">&#39;Number of rows&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">&#39;Number of columns&#39;</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">_dtypes_freq</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; pd.DataFrame:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        Function defined to return a dataframe with details about</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        the pandas dtypes frequency</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">        &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        counter, types = {}, df.dtypes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> dtype </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> types:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            tmp = </span><span class=\"mtk10\">str</span><span class=\"mtk1\">(dtype)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">if</span><span class=\"mtk1\"> tmp </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> counter.keys():</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                counter[tmp] += </span><span class=\"mtk5\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">else</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                counter[tmp] = </span><span class=\"mtk5\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        values = [[value] </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> value </span><span class=\"mtk10\">in</span><span class=\"mtk1\"> counter.values()]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> pd.DataFrame(</span><span class=\"mtk9\">data</span><span class=\"mtk1\">=values, </span><span class=\"mtk9\">columns</span><span class=\"mtk1\">=[</span><span class=\"mtk7\">&#39;Values&#39;</span><span class=\"mtk1\">], </span><span class=\"mtk9\">index</span><span class=\"mtk1\">=</span><span class=\"mtk10\">list</span><span class=\"mtk1\">(counter.keys()))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result_df = pd.concat([_shape(df), _dtypes_freq(df)])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">return</span><span class=\"mtk1\"> result_df</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5\">def</span><span class=\"mtk1\"> </span><span class=\"mtk8\">display_summary</span><span class=\"mtk1\">(</span><span class=\"mtk9\">df</span><span class=\"mtk1\">: pd.DataFrame) -&gt; </span><span class=\"mtk5\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">&quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    Function define to print out the result of the data summary</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">    &quot;&quot;&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    result_df = data_summary(df)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    message = </span><span class=\"mtk7\">&#39;---- Data summary ----&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">print</span><span class=\"mtk1\">(message, result_df, </span><span class=\"mtk9\">sep</span><span class=\"mtk1\">=</span><span class=\"mtk7\">&#39;</span><span class=\"mtk6\">\\n</span><span class=\"mtk7\">&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span></code></pre>\n<p>Then run the tests again:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry run pytest -v</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=============================================== </span><span class=\"mtk8\">test</span><span class=\"mtk1\"> session starts ===============================================================</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">platform linux -- Python 3.8.7, pytest-5.4.3, py-1.10.0, pluggy-0.13.1 -- /home/fbraza/.cache/pypoetry/virtualenvs/summarize-dataframe-SO-g_7pj-py3.8/bin/python</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cachedir: .pytest_cache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">rootdir: /home/fbraza/Documents/python_project/summarize_dataframe</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">collected 2 items</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">tests/test_summarize_dataframe.py::TestDataSummary::test_data_summary PASSED [ 50%]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">tests/test_summarize_dataframe.py::TestDataSummary::test_display PASSED      [100%]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">=============================================== 2 passed </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> 0.29s =================================================================</span></span></span></code></pre>\n<p>The tests now succeed. It is time to commit and share our work, for example by publishing it to <a href=\"https://github.com/\">GitHub</a>. Before that, let's take a close look at how to properly communicate about our work with Git commit messages while respecting and enforcing a common standard.</p>\n<h2 id=\"enforce-git-commit-messages-rules-in-your-python-project\" style=\"position:relative;\"><a href=\"#enforce-git-commit-messages-rules-in-your-python-project\" aria-label=\"enforce git commit messages rules in your python project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enforce Git commit messages rules in your Python project</h2>\n<p>Writing optimal Git commit messages is not an easy task. Messages need to be clear, readable, and understandable in the long term. <strong><a href=\"https://www.conventionalcommits.org/en/v1.0.0/\">The Conventional Commits specification</a></strong> proposes a set of rules for creating explicit commit histories.</p>\n<h3 id=\"using-commitizen\" style=\"position:relative;\"><a href=\"#using-commitizen\" aria-label=\"using commitizen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using <code>commitizen</code></h3>\n<p>In our series about <a href=\"/fbraza-github-pages/en/2021/02/02/js-monorepos-commits-changelog/\">JavaScript monorepos</a>, we saw how to integrate these conventions to enforce good practices regarding commit messages. Applied to Python, we are going to use a package called <a href=\"https://commitizen-tools.github.io/commitizen/\">commitizen</a> to achieve this. Let's add this package to our developer dependencies:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry add -D commitizen</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Using version ^2.17.0 </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> commitizen</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Updating dependencies</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Resolving dependencies... (3.1s)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Writing lock file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Package operations: 11 installs, 0 updates, 0 removals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing markupsafe (1.1.1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing prompt-toolkit (3.0.18)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing argcomplete (1.12.2)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing colorama (0.4.4)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing decli (0.5.2)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing jinja2 (2.11.3)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing pyyaml (5.4.1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing questionary (1.6.0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing termcolor (1.1.0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing tomlkit (0.7.0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  • Installing commitizen (2.17.0)</span></span></span></code></pre>\n<p>To setup <code>commitizen</code> for your project, run the command <code>cz init</code>. It prompts us with a set of questions:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cz init</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">? Please choose a supported config file: (default: pyproject.toml)  (Use arrow keys)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> » pyproject.toml</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   .cz.toml</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   .cz.json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   cz.json</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   .cz.yaml</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   cz.yaml</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">? Please choose a cz (commit rule): (default: cz_conventional_commits)  (Use arrow keys)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> » cz_conventional_commits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   cz_jira</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   cz_customize</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">? Please enter the correct version format: (default: </span><span class=\"mtk7\">&quot;</span><span class=\"mtk1\">$version</span><span class=\"mtk7\">&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">? Do you want to install pre-commit hook?  (Y/n)</span></span></span></code></pre>\n<p>Choose all default choices here as they fit perfectly with our actual situation. The last question asks us if we want to use <a href=\"https://pre-commit.com/\">pre-commit</a> hook. We are going to come back to this later on. So just answer <code>no</code> for now. If we look at our <code>pyproject.toml</code> file we can see that a new entry named <code>[tool.commitizen]</code> has been added:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"ini\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">[...]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[tool.commitizen]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">name = &quot;cz_conventional_commits&quot; # commit rule chosen</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">version = &quot;0.0.1&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">tag_format = &quot;$version&quot;</span></span></code></pre>\n<p>To check your commit message, you can use the following command:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cz check -m </span><span class=\"mtk7\">&quot;all summarize_data tests now succeed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">commit validation: failed!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">please enter a commit message </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> the commitizen format.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">commit </span><span class=\"mtk7\">&quot;&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk7\">&quot;all summarize_data tests now succeed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">pattern: (build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)!?(</span><span class=\"mtk6\">\\(\\S</span><span class=\"mtk1\">+</span><span class=\"mtk6\">\\)</span><span class=\"mtk1\">)?:(</span><span class=\"mtk6\">\\s</span><span class=\"mtk1\">.*)</span></span></span></code></pre>\n<p>Our message is rejected because it does not respect the commit rules. The last line suggests some patterns to use. Take some time to read the <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\">conventional commits</a> documentation and run the command <code>cz info</code> to print a short documentation:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cz info</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">The commit contains the following structural elements, to communicate intent to the consumers of your library:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">fix: a commit of the </span><span class=\"mtk8\">type</span><span class=\"mtk1\"> fix patches a bug </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> your codebase</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(this correlates with PATCH </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> semantic versioning).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">feat: a commit of the </span><span class=\"mtk8\">type</span><span class=\"mtk1\"> feat introduces a new feature to the codebase</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(this correlates with MINOR </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> semantic versioning).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">BREAKING CHANGE: a commit that has the text BREAKING CHANGE: at the beginning of</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">its optional body or footer section introduces a breaking API change</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(correlating with MAJOR </span><span class=\"mtk3\">in</span><span class=\"mtk1\"> semantic versioning).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">A BREAKING CHANGE can be part of commits of any type.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Others: commit types other than fix: and feat: are allowed,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">like chore:, docs:, style:, refactor:, perf:, test:, and others.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[...]</span></span></span></code></pre>\n<p>This command guides you on how to write your commit message. Here the format should be <code>\"[pattern]: [MESSAGE]\"</code>. For us, this leads to:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cz check -m </span><span class=\"mtk7\">&quot;test: all summarize_data tests now succeed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Commit validation: successful!</span></span></span></code></pre>\n<p>Very good, our commit message is valid. But hold on. Checking our messages each time with <code>commitizen</code> might be cumbersome and doesn't provide the garanty to be applied. It would be better to check automatically the message each time we use the <code>git commit</code> command. That is where the <code>pre-commit</code> hook takes action.</p>\n<h3 id=\"automatically-enforce-git-message-conventions-with-pre-commit\" style=\"position:relative;\"><a href=\"#automatically-enforce-git-message-conventions-with-pre-commit\" aria-label=\"automatically enforce git message conventions with pre commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automatically enforce Git message conventions with <code>pre-commit</code></h3>\n<p>Git hooks are useful to automate and perform some actions at specific place during the Git lifecycle. The <code>pre-commit</code> hook permits to run scripts before a Git commit is issued. We can use the hook to validate the commit messages and prevent Git from using a message which doesn't match our expectations. The hook is active from the command line as well as from any tools interacting with the Git repository where the hook is registered, including your favoride IDE.</p>\n<p><a href=\"https://pre-commit.com/index.html\">pre-commit</a> is a framework for managing and maintaining multi-language pre-commit hooks. If you want to know more about the inner workings and the spectrum of possibilities opened by the <code>pre-commit</code> hook, you can read its <a href=\"https://pre-commit.com/index.html#usage\">usage documentation</a>.</p>\n<p>To install <code>pre-commit</code> just run:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">peotry add -D pre-commit</span></span></span></code></pre>\n<p>To automate the Git commit verification we first need to create a configuration file <code>.pre-commit-config.yaml</code> as followed:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"yaml\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">---</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">repos</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  - </span><span class=\"mtk10\">repo</span><span class=\"mtk1\">: </span><span class=\"mtk7\">https://github.com/commitizen-tools/commitizen</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">rev</span><span class=\"mtk1\">: </span><span class=\"mtk7\">master</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">hooks</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk10\">id</span><span class=\"mtk1\">: </span><span class=\"mtk7\">commitizen</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">stages</span><span class=\"mtk1\">: [</span><span class=\"mtk7\">commit-msg</span><span class=\"mtk1\">]</span></span></span></code></pre>\n<p>Next we can install the hook with its source defined in the <code>repo</code> property:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">pre-commit install --hook-type commit-msg</span></span></span></code></pre>\n<p>Now that everything is set, we can use our Git hook:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit -m </span><span class=\"mtk7\">&quot;test: all summarize_data tests now succeed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[INFO] Initializing environment </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> https://github.com/commitizen-tools/commitizen.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[INFO] Installing environment </span><span class=\"mtk3\">for</span><span class=\"mtk1\"> https://github.com/commitizen-tools/commitizen.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[INFO] Once installed this environment will be reused.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[INFO] This may take a few minutes...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">commitizen check.........................................................Passed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[INFO] Restored changes from /home/fbraza/.cache/pre-commit/patch1617970841.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[master 1e64d0a] test: all summarize_data tests now succeed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> 2 files changed, 48 insertions(+), 5 deletions(-)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> rewrite tests/test_summarize_dataframe.py (98%)</span></span></span></code></pre>\n<p><code>pre-commit</code> installs an environment to run its checks. As you can see here the commit message assessment passed. To finish we can commit and push the modifications made on the build files (<code>poetry.lock</code>, <code>pyproject.toml</code>) and our module:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit -m </span><span class=\"mtk7\">&quot;build: add developer dependencies&quot;</span><span class=\"mtk1\"> -m </span><span class=\"mtk7\">&quot;commitizen and pre-commit added to our dev dependencies&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">commitizen check.........................................................Passed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[master 1c6457c] build: add developer dependencies</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> 2 files changed, 585 insertions(+), 1 deletion(-)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> git commit -m </span><span class=\"mtk7\">&quot;feat: implementation of the summary function to summarize dataframe&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">commitizen check.........................................................Passed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[master 5c053ad] build: add developer dependencies</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> 1 file changed, 94 insertions(+)</span></span></span></code></pre>\n<p>We can now push everything to our GitHub repository:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git push origin master</span></span></span></code></pre>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>We covered a few topics:</p>\n<ul>\n<li>On the first hand, we saw how to write unit tests for your code. You shall always start to write tests before coding. It helps you affinate your API and expectations before implementing them. You will definitively benefit from it. We used <code>unittest</code> which is already available in the Python standard library. I actually like its simple design and object-oriented approach but others prefer using the <a href=\"https://docs.pytest.org/en/stable/\"><code>pytest</code> library</a> which is definitively worth checking. One very convenient aspect is that <code>pytest</code> supports the <code>unittest.TestCase</code> class from the beginning. You can then write your tests with either of the two libraries or even mix both depending on your needs and have one common command to run them all.</li>\n<li>We saw how to enforce good practices when writing Git commit messages. Our proposed solution relies on the use of two distinct Python packages: <a href=\"https://commitizen-tools.github.io/commitizen/\">commitizen</a> and <a href=\"https://pre-commit.com/\">pre-commit</a>. The first one provides with the tools to check if a message validate the conventions you have chosen. The second one automates the process using a Git hook.</li>\n</ul>\n<p>In our next and last article, we are going to go one step further. We automate testing using <code>tox</code> and integrate it inside a <a href=\"/fbraza-github-pages/en/tag/ci-cd/\">CI/CD</a> pipeline. Once done we will show how to prepare our package and finally publish it on <a href=\"https://pypi.org/\">PyPi</a> using <code>poetry</code>.</p>\n<h2 id=\"cheat-sheet\" style=\"position:relative;\"><a href=\"#cheat-sheet\" aria-label=\"cheat sheet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cheat sheet</h2>\n<h3 id=\"poetry\" style=\"position:relative;\"><a href=\"#poetry\" aria-label=\"poetry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>poetry</code></h3>\n<ul>\n<li>\n<p>Add project dependencies:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry add [package_name]</span></span></span></code></pre>\n</li>\n<li>\n<p>Add developer dependencies:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry add -D [package_name]</span></span></span></code></pre>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry add --dev [package_name]</span></span></span></code></pre>\n</li>\n<li>\n<p>Run test:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">poetry run pytest</span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"commitizen\" style=\"position:relative;\"><a href=\"#commitizen\" aria-label=\"commitizen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>commitizen</code></h3>\n<ul>\n<li>\n<p>Initialize <code>commitizen</code>:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cz init</span></span></span></code></pre>\n</li>\n<li>\n<p>Check your commit:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cz check -m </span><span class=\"mtk7\">&quot;YOUR MESSAGE&quot;</span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"pre-commit\" style=\"position:relative;\"><a href=\"#pre-commit\" aria-label=\"pre commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>pre-commit</code></h3>\n<ul>\n<li>\n<p>Generate a default configuration file:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">pre-commit sample-config</span></span></span></code></pre>\n</li>\n<li>\n<p>Install git hook:</p>\n<pre class=\"grvsc-container panda-syntax\" data-language=\"bash\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">pre-commit install --hook-type [hook_name]</span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"acknowledgments\" style=\"position:relative;\"><a href=\"#acknowledgments\" aria-label=\"acknowledgments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Acknowledgments</h2>\n<p>This article was first published in Adaltas <a href=\"https://www.adaltas.com/en/articles/\">blog</a> and kindly reviewed by the CEO David Worms and one consultant Barthelemy NGOM.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .panda-syntax {\n    background-color: #292A2B;\n    color: #E6E6E6;\n  }\n  .panda-syntax .mtki { font-style: italic; }\n  .panda-syntax .mtk1 { color: #E6E6E6; }\n  .panda-syntax .mtk3 { color: #FF75B5; }\n  .panda-syntax .mtk5 { color: #FFB86C; }\n  .panda-syntax .mtk8 { color: #6FC1FF; }\n  .panda-syntax .mtk9 { color: #BBBBBB; }\n  .panda-syntax .mtk7 { color: #19F9D8; }\n  .panda-syntax .mtk6 { color: #45A9F9; }\n  .panda-syntax .mtk13 { color: #FF9AC1; }\n  .panda-syntax .mtk4 { color: #676B79; }\n  .panda-syntax .mtk10 { color: #FFCC95; }\n  .panda-syntax .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Modern Python part 2: write unit tests & enforce Git commit conventions","date":"24 June, 2021","tags":["Python","Github","Dev"]},"excerpt":"Good software engineering practices always bring a lot of long-term benefits. For example, writing unit tests permits you to maintain large…"}},"pageContext":{"slug":"/modern-python-part2/"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}