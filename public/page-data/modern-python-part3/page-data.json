{"componentChunkName":"component---src-pages-markdown-remark-fields-slug-js","path":"/modern-python-part3/","result":{"data":{"markdownRemark":{"html":"<p>To propose a well-maintained and usable Python package to the open-source community or even inside your company, you are expected to accomplish a set of critical steps. First ensure that your code is unit tested. Second respect the common writing and format styles. Automate these steps and integrate them in a continuous integration pipeline to avoid any regression that stems from modifications applied to your source code. Finally, provide enough documentation for future users. Once done it is common to publish your Python package on the <a href=\"https://pypi.org/\">Python Package Index (PyPI)</a>. Here we are going to see how to accomplish each of these steps using <a href=\"https://python-poetry.org/\">Poetry</a>, <a href=\"https://tox.readthedocs.io/en/latest/\">Tox</a> and <a href=\"https://github.com/features/actions\">GitHub Actions</a>. The code used for our use case can be found <a href=\"https://github.com/adaltas/summarize_dataframe\">on our repository</a>.</p>\n<h2 id=\"automate-linter-checks-and-tests-with-tox\" style=\"position:relative;\"><a href=\"#automate-linter-checks-and-tests-with-tox\" aria-label=\"automate linter checks and tests with tox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automate linter checks and tests with <code>tox</code></h2>\n<p>If not done, activate your virtual environment.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry shell</code></pre></div>\n<p>To check the conformity of our code, we use a couple of packages that are going to evaluate if the code respects the common Python writing guidelines. Then, to automate their execution as well as our unit tests, we use <a href=\"https://tox.readthedocs.io/en/latest/\">tox</a>. To install them run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry <span class=\"token function\">add</span> black flake8 pylint tox <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<p><code>tox</code> and <code>poetry</code> don't work well together by default. They are somewhat redundant. To use them together, we need to implement a few tricks (see issues <a href=\"https://github.com/python-poetry/poetry/issues/1941\">1941</a> and <a href=\"https://github.com/python-poetry/poetry/issues/1745\">1745</a>). <code>tox</code> install its own environment and dependencies to run its tasks. But to install dependencies, you have to declare the command <code>poetry install</code> in our <code>tox</code> configuration. This brings redundancy and can lead to some <a href=\"https://github.com/python-poetry/poetry/issues/1745\">issues</a>. Moreover, this does not allow to install developers dependencies needed to execute our tests. It is more productive to let <code>tox</code> use the <code>poetry.lock</code> file to install necessary dependencies. For this, I advise you to use the <a href=\"https://github.com/enpaul/tox-poetry-installer\">tox-poetry-installer</a> package developed to solve these problems:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry <span class=\"token function\">add</span> tox-poetry-installer<span class=\"token punctuation\">[</span>poetry<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<p>Now we declare our <code>tox</code> configuration in a <code>tox.ini</code> file whose content is:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">tox</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">envlist</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">py38</span>\n<span class=\"token key attr-name\">isolated_build</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">testenv</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Linting, checking syntax and running tests</span>\n<span class=\"token key attr-name\">require_locked_deps</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">install_dev_deps</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">commands</span> <span class=\"token punctuation\">=</span>\n    poetry run black summarize_dataframe/summarize_df.py\n    poetry run flake8 summarize_dataframe/summarize_df.py\n    poetry run pylint summarize_dataframe/summarize_df.py\n    poetry run pytest -v</code></pre></div>\n<p>You can see two sections here:</p>\n<ul>\n<li><strong><code>[tox]</code></strong>: Define the global settings for your <code>tox</code> automation pipeline including the Python version of the test environments.</li>\n<li><strong><code>[testenv]</code></strong>: Define the test environments. In our case we have some extra-variables <code>require_locked_deps</code> and <code>install_dev_deps</code> that are brought by the <a href=\"https://github.com/enpaul/tox-poetry-installer\">tox-poetry-installer</a> package. <code>require_locked_deps</code> is to choose whether or not you want <code>tox</code> to harness the <code>poetry.lock</code> file to install dependencies. <code>install_dev_deps</code> is to choose if <code>tox</code> installs the developer dependencies.</li>\n</ul>\n<blockquote>\n<p>Refer to the <a href=\"https://tox.readthedocs.io/en/latest/config.html#tox-global-settings\"><code>tox</code> documentation</a> to learn more about the configuration as well as the <a href=\"https://github.com/enpaul/tox-poetry-installer\"><code>tox-poetry-installer</code> documentation</a> to learn more about it extra configuration.</p>\n</blockquote>\n<p>Run the <code>tox</code> pipeline:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tox\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run black summarize_dataframe/summarize_df.py\nAll done<span class=\"token operator\">!</span> ‚ú® üç∞ ‚ú®\n<span class=\"token number\">1</span> <span class=\"token function\">file</span> left unchanged.\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run flake8 summarize_dataframe/summarize_df.py\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run pylint summarize_dataframe/summarize_df.py\n************* Module summarize_dataframe.summarize_df\nsummarize_dataframe/summarize_df.py:1:0: C0114: Missing module docstring <span class=\"token punctuation\">(</span>missing-module-docstring<span class=\"token punctuation\">)</span>\nsummarize_dataframe/summarize_df.py:4:0: C0103: Argument name <span class=\"token string\">\"df\"</span> doesn<span class=\"token string\">'t conform to snake_case naming style (invalid-name)\nsummarize_dataframe/summarize_df.py:11:4: C0103: Argument name \"df\" doesn'</span>t conform to snake_case naming style <span class=\"token punctuation\">(</span>invalid-name<span class=\"token punctuation\">)</span>\nsummarize_dataframe/summarize_df.py:23:4: C0103: Argument name <span class=\"token string\">\"df\"</span> doesn<span class=\"token string\">'t conform to snake_case naming style (invalid-name)\nsummarize_dataframe/summarize_df.py:43:0: C0103: Argument name \"df\" doesn'</span>t conform to snake_case naming style <span class=\"token punctuation\">(</span>invalid-name<span class=\"token punctuation\">)</span>\n\n------------------------------------------------------------------\nYour code has been rated at <span class=\"token number\">7.62</span>/10 <span class=\"token punctuation\">(</span>previous run: <span class=\"token number\">7.62</span>/10, +0.00<span class=\"token punctuation\">)</span>\n\nERROR: InvocationError <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">command</span> /home/fbraza/Documents/python_project/summarize_dataframe/.tox/py38/bin/poetry run pylint summarize_dataframe/summarize_df.py <span class=\"token punctuation\">(</span>exited with code <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n________________________________________________________ summary ________________________________________________________________\nERROR:   py38: commands failed</code></pre></div>\n<p>An error is raised because <a href=\"https://www.pylint.org/\">pylint</a> shed light on some style inconsistencies. By default, <code>tox</code> quits if any warnings or errors occurred during the execution of the commands. The errors are by themselves quite explicit. After correcting them, run again the pipeline:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tox\n<span class=\"token comment\"># shorten for brevety [...]</span>\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run black summarize_dataframe/summarize_df.py\nAll done<span class=\"token operator\">!</span> ‚ú® üç∞ ‚ú®\n<span class=\"token number\">1</span> <span class=\"token function\">file</span> left unchanged.\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run flake8 summarize_dataframe/summarize_df.py\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run pylint summarize_dataframe/summarize_df.py\n\n--------------------------------------------------------------------\nYour code has been rated at <span class=\"token number\">10.00</span>/10 <span class=\"token punctuation\">(</span>previous run: <span class=\"token number\">10.00</span>/10, +0.00<span class=\"token punctuation\">)</span>\n\npy38 run-test: commands<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> poetry run pytest <span class=\"token parameter variable\">-v</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token builtin class-name\">test</span> session starts <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\nplatform linux -- Python <span class=\"token number\">3.8</span>.7, pytest-5.4.3, py-1.10.0, pluggy-0.13.1 -- /home/fbraza/Documents/python_project/summarize_dataframe/.tox/py38/bin/python\ncachedir: .tox/py38/.pytest_cache\nrootdir: /home/fbraza/Documents/python_project/summarize_dataframe\ncollected <span class=\"token number\">2</span> items\n\ntests/test_summarize_dataframe.py::TestDataSummary::test_data_summary PASSED                                                                                           <span class=\"token punctuation\">[</span> <span class=\"token number\">50</span>%<span class=\"token punctuation\">]</span>\ntests/test_summarize_dataframe.py::TestDataSummary::test_display PASSED                                                                                                <span class=\"token punctuation\">[</span><span class=\"token number\">100</span>%<span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span> passed <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.30s <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span>\n______________________________________________________ summary ____________________________________________________________________\n  py38: commands succeeded\n  congratulations <span class=\"token builtin class-name\">:</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Perfect. The <code>tox</code> automation pipeline succeed locally. The next step start implements the CI pipeline with GitHub Actions.</p>\n<h2 id=\"continuous-integration-with-github-actions\" style=\"position:relative;\"><a href=\"#continuous-integration-with-github-actions\" aria-label=\"continuous integration with github actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Continuous Integration with GitHub Actions</h2>\n<p>GitHub Actions make it easy to automate all your software workflows. This service is event-driven meaning that a set of commands is triggered when a specific event occurs. Such events could be a commit pushed to the branch or a pull request. GitHub Actions are pretty convenient to run all needed tests against your code.</p>\n<p>Most importantly, GitHub Actions provide the ability to test your Python package using several Python versions and on different operating systems (Linux, macOS and Windows). The only thing you need is an existing repository and a <code>.github/workflows/&#x3C;file_name>.yaml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> .github/workflows\n<span class=\"token function\">touch</span> .github/workflows/ci.yml</code></pre></div>\n<p>The content of the <code>.github/workflows/ci.yml</code> file is:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI Pipeline for summarize_df\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> push\n  <span class=\"token punctuation\">-</span> pull_request\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>matrix.platform<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">platform</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ubuntu<span class=\"token punctuation\">-</span>latest<span class=\"token punctuation\">,</span> macos<span class=\"token punctuation\">-</span>latest<span class=\"token punctuation\">,</span> windows<span class=\"token punctuation\">-</span>latest<span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.9</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Python $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.python<span class=\"token punctuation\">-</span>version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v2\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.python<span class=\"token punctuation\">-</span>version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        python -m pip install poetry\n        poetry install</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Test with tox\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> poetry run tox</code></pre></div>\n<p>A few words about the different fields:</p>\n<ul>\n<li><strong><code>on</code></strong>: this field defines the type of event that is going to trigger the pipeline.</li>\n<li><strong><code>jobs</code></strong>: this field defines the multiple steps of your pipeline. They run in an instance of a virtual environment.</li>\n<li><strong><code>build</code></strong>: this is where all the magic happens:\n<ul>\n<li>The <code>strategy.matrix.platform</code> field defines the different OS you want to use to test your package. Use templating to pass these values to the <code>build.runs-on</code> field (<code>${{matrix.platform}}</code>).</li>\n<li>The <code>strategy.matrix.python-version</code> field defines the different versions of Python you want to use to test your package.</li>\n<li>The <code>steps</code> field permits you to specify which actions you use (<code>steps.uses</code>) and which command you want to run (<code>steps.run</code>)</li>\n</ul>\n</li>\n</ul>\n<p>Before finishing, alter the <code>tox.ini</code> and <code>pyporject.toml</code> files accordingly. Initially we chose the <code>3.8</code> Python version for <code>tox</code>. But we want it to be compatible with  <code>3.7</code> and <code>3.9</code>. For the <code>pyproject.toml</code> file, choose a version expected to be compatible with your package. Here we choose to make our package compatible from <code>3.7.1</code> and above. Below are the changes added to our files:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># content of: tox.ini</span>\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">tox</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">envlist</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">py37,py38,py39</span>\n<span class=\"token key attr-name\">isolated_build</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n<span class=\"token key attr-name\">skip_missing_interpreters</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">true</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">...</span><span class=\"token punctuation\">]</span></span></code></pre></div>\n<blockquote>\n<p>Having several python version defined in your <code>tox.ini</code> file causes issue with your local testing. Running the <code>tox</code> raises an error because of lacking python versions. If you still want to test you module locally just use the <code>tox -e py</code> command.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token comment\"># content of: pyproject.toml</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry.dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"^3.7.1\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p>When you modify the <code>pyproject.toml</code> file, <strong>always</strong> run the <code>poetry update</code> command that can check some unexpected incompatibilities between your dependencies and the version of Python you wish to use.</p>\n</blockquote>\n<p>To finish, we are going to install a package, called <a href=\"https://github.com/ymyzk/tox-gh-actions\">tox-gh-actions</a>, to run <code>tox</code> in parallel on GitHub while using several versions of Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry <span class=\"token function\">add</span> tox-gh-actions <span class=\"token parameter variable\">--dev</span></code></pre></div>\n<p>The pipeline is ready. Add, commit and push your changes to see the pipeline running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"!.github/\"</span> <span class=\"token operator\">>></span> .gitignore\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> .gitignore\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"build: update .gitignore to unmask .github/ folder\"</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> pyproject.toml tox.ini poetry.lock <span class=\"token variable\"><span class=\"token variable\">`</span>.github/workflows/ci.yml<span class=\"token variable\">`</span></span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"build: tox pipeline + github actions CI pipeline\"</span></code></pre></div>\n<p>Go to your GitHub repository and click on the <strong>Actions</strong> tab:\n![GitHub action]({{ site.baseurl }}/images/2021-06-29-python-part3-gh01.png)\nYou see all the previous and ongoing pipelines:\n![Workflow runs]({{ site.baseurl }}/images/2021-06-29-python-part3-gh02.png)\nLet's click on the ongoing pipeline. The pipeline runs on each OS and for each Python version. Wait a couple of minutes to see the results:\n![Job completed]({{ site.baseurl }}/images/2021-06-29-python-part3-gh03.png)\nAll the pipelines succeed! We are ready to publish our package on the PyPi registry.</p>\n<h2 id=\"publish-packages-on-pypi-with-poetry\" style=\"position:relative;\"><a href=\"#publish-packages-on-pypi-with-poetry\" aria-label=\"publish packages on pypi with poetry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Publish packages on PyPi with <code>poetry</code></h2>\n<p>To make your package publishable, add some details in the <code>[tool.poetry]</code> section of your <code>pyproject.toml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"summarize_dataframe\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"A package to provide summary data about pandas DataFrame\"</span>\n<span class=\"token key property\">license</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"MIT\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"fbraza &lt;fbraza@tutanota.com>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">keywords</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pandas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dataframe\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">readme</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"README.md\"</span>\n<span class=\"token key property\">homepage</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/fbraza/summarize_dataframe\"</span>\n<span class=\"token key property\">repository</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/fbraza/summarize_dataframe\"</span>\n<span class=\"token key property\">include</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CHANGELOG.md\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>All the variables here are quite explicit. These are metadata needed for the publication of the package. The <code>include</code> variable is interesting to add any files you want. In our case we are going to add a <code>CHANGELOG.md</code> file. Do you remember <code>commitizen</code>? If not please take the time to read our article on <a href=\"/fbraza-github-pages/en/2021/06/24/unit-tests-conventional-commits/\">commitizen and conventional commits</a>. Use the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cz bump</code></pre></div>\n<p>It prints the semantic version from your <code>pyproject.toml</code> file and ask you to create a Git tag. The version will be updated based on your Git commit. Next we create the <code>CHANGELOG.md</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cz changelog\n<span class=\"token function\">cat</span> CHANGELOG.md\n\n<span class=\"token comment\">## Unreleased</span>\n\n<span class=\"token comment\">## 0.1.0 (2021-04-28)</span>\n\n<span class=\"token comment\">### Refactor</span>\n\n- correct pylint warnings\n- <span class=\"token function\">split</span> the <span class=\"token keyword\">function</span> into two: one returning <span class=\"token function\">df</span> other <span class=\"token keyword\">for</span> output\n\n<span class=\"token comment\">### Feat</span>\n\n- implementation of the summary <span class=\"token keyword\">function</span> to summarize dataframe</code></pre></div>\n<p>Your <code>CHANGELOG.md</code> has been created based on the Git history you generated thanks to <code>commitizen</code>. Pretty neat isn't it?! Once done let's focus on publishing our package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry build\nBuilding summarize_dataframe <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span>.0<span class=\"token punctuation\">)</span>\n  - Building sdist\n  - Built summarize_dataframe-0.1.0.tar.gz\n  - Building wheel\n  - Built summarize_dataframe-0.1.0-py3-none-any.whl</code></pre></div>\n<p>This creates a folder called <code>dist</code> where the built package is located. To test if everything works you can use <code>pip</code>:</p>\n<blockquote>\n<p>Do this outside of your virtual environment to not pollute it.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> path/to/your/package/summarize_dataframe-0.1.0-py3-none-any.whl</code></pre></div>\n<p>Now we need to create an account on <a href=\"https://pypi.org/account/register/\">PyPi</a>. Just enter the expected details, validate your email and execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry publish\nUsername: ***********\nPassword: ***********\nPublishing summarize_dataframe <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span>.0<span class=\"token punctuation\">)</span> to PyPI\n - Uploading summarize_dataframe-0.1.0-py3-none-any.whl <span class=\"token number\">100</span>%\n - Uploading summarize_dataframe-0.1.0.tar.gz <span class=\"token number\">100</span>%</code></pre></div>\n<p>The package is now online and shared with the community.</p>\n<p>![Project publication on PyPi]({{ site.baseurl }}/images/2021-06-29-python-part3-gh04.png)</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p><code>tox</code> provides a nice interface to automate all your unit tests and validation checks. The ecosystem around <code>poetry</code> is getting more mature and provides solutions to work with <code>tox</code> without too much hassle. Collectively, these two solutions permit to establish a very efficient and coherent CI pipeline. To run the pipeline and test your packages against different OS or versions of Python, you can leverage GitHub Actions as described above.</p>\n<p><code>poetry</code> was at the center of our approach. From the project initialization to its publication and going through the management of its packages and dependencies. <code>poetry</code> demonstrated its ease of use and efficacy that will definitely facilitate the life of developers, Data Scientists or Data Engineers who develop projects in Python.</p>\n<p>Our articles describe a full setup that you can leverage to build your own Python project to respect good software engineering practices.</p>\n<h2 id=\"cheat-sheet\" style=\"position:relative;\"><a href=\"#cheat-sheet\" aria-label=\"cheat sheet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cheat Sheet</h2>\n<h3 id=\"tox\" style=\"position:relative;\"><a href=\"#tox\" aria-label=\"tox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tox</code></h3>\n<ul>\n<li>\n<p>Run your tox pipeline</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">tox</code></pre></div>\n</li>\n</ul>\n<h3 id=\"poetry\" style=\"position:relative;\"><a href=\"#poetry\" aria-label=\"poetry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>poetry</code></h3>\n<ul>\n<li>\n<p>Build your package</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry build</code></pre></div>\n</li>\n<li>\n<p>Publish your package</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry publish</code></pre></div>\n</li>\n</ul>\n<h2 id=\"acknowledgments\" style=\"position:relative;\"><a href=\"#acknowledgments\" aria-label=\"acknowledgments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Acknowledgments</h2>\n<p>This article was first published in Adaltas <a href=\"https://www.adaltas.com/en/articles/\">blog</a> and kindly reviewed by the CEO David Worms and one consultant Barthelemy NGOM.</p>","frontmatter":{"title":"Modern Python part 3: run a CI pipeline & publish your package to PiPy","date":"June 29, 2021","tags":["Python","Github","DevOps"]}}},"pageContext":{"id":"efa943dc-14bb-5ebe-9154-3277b4bd0318","fields__slug":"/modern-python-part3/","__params":{"fields__slug":"modern-python-part3"}}},"staticQueryHashes":["2750728228"],"slicesMap":{}}