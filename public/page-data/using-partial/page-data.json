{"componentChunkName":"component---src-pages-markdown-remark-fields-slug-js","path":"/using-partial/","result":{"data":{"markdownRemark":{"html":"<p>Some libariries in python provide methods or functions that enable the user to pass a <code>function</code> object as an argument. One limitation that I faced was the impossibility to pass extra arguments associated with the user defined <code>function</code> object. This was a problem until I discover the role of <code>partial</code>.</p>\n<h2 id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem</h2>\n<p>Two use cases, same problem:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> partial\n<span class=\"token keyword\">from</span> airflow <span class=\"token keyword\">import</span> DAG\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Variable\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>operators<span class=\"token punctuation\">.</span>python <span class=\"token keyword\">import</span> PythonOperator\n<span class=\"token keyword\">from</span> airflow<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>dates <span class=\"token keyword\">import</span> days_ago\n\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> sqlalchemy\n<span class=\"token keyword\">import</span> os\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">process_bi_tables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"parent/path/folder\"</span>\n    bucket <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"BUCKET\"</span><span class=\"token punctuation\">)</span>\n    region <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"REGION\"</span><span class=\"token punctuation\">)</span>\n    project_id <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"PROJECT_ID\"</span><span class=\"token punctuation\">)</span>\n    postg_connex_string <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>project_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>region<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'POSTGRE_SERVER_NAME'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">postgre_pool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        connector <span class=\"token operator\">=</span> Connector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>\n            instance_connection_string<span class=\"token operator\">=</span> postg_connex_string<span class=\"token punctuation\">,</span>\n            driver<span class=\"token operator\">=</span><span class=\"token string\">\"your_driver\"</span><span class=\"token punctuation\">,</span>\n            user<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_USER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_PASS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            db<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"DB_NAME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n    postgre_pool <span class=\"token operator\">=</span> sqlalchemy<span class=\"token punctuation\">.</span>create_engine<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"postgresql+pg8000://\"</span><span class=\"token punctuation\">,</span>\n        creator<span class=\"token operator\">=</span>postgre_pool\n    <span class=\"token punctuation\">)</span>\n\n    tables <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"patients_doctors\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nights\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"doctors\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sensors\"</span><span class=\"token punctuation\">]</span>\n    views <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nights_view\"</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">with</span> postgre_pool<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> postgre_conn<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> tables <span class=\"token operator\">+</span> views<span class=\"token punctuation\">:</span>\n            logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Processing table : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># read_query is not defined here to be brief</span>\n            query <span class=\"token operator\">=</span> read_query<span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">=</span>bucket<span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">=</span>prefix<span class=\"token punctuation\">,</span> filename<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span>\n            postgre_conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n    logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"BI databases updated\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span>\n    dag_id<span class=\"token operator\">=</span><span class=\"token string\">\"pipeline_bi\"</span><span class=\"token punctuation\">,</span>\n    default_args<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"airflow\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    schedule_interval<span class=\"token operator\">=</span><span class=\"token string\">\"0 */3 * * *\"</span><span class=\"token punctuation\">,</span>\n    start_date<span class=\"token operator\">=</span>days_ago<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    catchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n    update_bi_tables <span class=\"token operator\">=</span> PythonOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">\"update_bi_tables\"</span><span class=\"token punctuation\">,</span>\n        python_callable<span class=\"token operator\">=</span>partial<span class=\"token punctuation\">(</span>\n            process_bi_tables<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let's have a look to the <code>process_bi_tables</code> function:</p>\n<ul>\n<li>The purpose of this functions is to realize some data processing suing SQL scripts. We iterate through tables names and load <code>sql</code> scripts named the same way. The BI pipeline and Composer instances are deployed in different environments in US and Europe. By default Cloud Composer set up a bucket where you can find the <code>airflow.cfg</code> file and upload your dags and python modules. You can add there any folders and files you need to use. In our case, we need to load these <code>sql</code> scripts.</li>\n<li>First, you can see in the definition of the <code>pocess_bi_tables</code> function that we defined a variable <code>bucket</code> and <code>prefix</code>. They are defined inside the function which is not convenient if I want the code to be modular for each environment and avoid having to define each time some airflow variables. The <code>pocess_bi_tables</code> is passed to the <code>PythonOperator</code> as argument.</li>\n<li>Second, ntoice the way I created the <code>postgre_pool</code> function. It is an inner functions that return a <code>Connector</code> object that will be necessary to setup the connection with my database. This functions is passed to <code>sqlalchemy.create_engine</code> as argument.</li>\n</ul>\n<p>I forced myself to define these two functions without any parameters because at first I had no idea how to use the <code>function</code> object as argument and pass its <code>args</code>. To circumvent this issue I had to define some variables inside the function body and this makes the code poorly mainainable and not that beautiful to read. This was until I found <code>partial</code>.</p>\n<h2 id=\"partial-in-action\" style=\"position:relative;\"><a href=\"#partial-in-action\" aria-label=\"partial in action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>partial</code> in action</h2>\n<p>In the documentation you read:</p>\n<blockquote>\n<p>Returns a new partial object which when called will behave like <code>func</code> called with the positional arguments <code>args</code> and keyword arguments keywords. If more arguments are supplied to the call, they are appended to <code>args</code>. If additional keyword arguments are supplied, they extend and override keywords.</p>\n</blockquote>\n<p>This looks exactly what I need. Let's refactor the code using <code>partial</code>, first with <code>postgre_pool</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>connstring<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> driver<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    connector <span class=\"token operator\">=</span> Connector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> connector<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>\n        instance_connection_string<span class=\"token operator\">=</span>connstring<span class=\"token punctuation\">,</span>\n        driver<span class=\"token operator\">=</span>driver<span class=\"token punctuation\">,</span>\n        user<span class=\"token operator\">=</span>user<span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">,</span>\n        db<span class=\"token operator\">=</span>db<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">process_bi_tables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"parent/path/folder\"</span>\n    bucket <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"BUCKET\"</span><span class=\"token punctuation\">)</span>\n    region <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"REGION\"</span><span class=\"token punctuation\">)</span>\n    project_id <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"PROJECT_ID\"</span><span class=\"token punctuation\">)</span>\n    postg_connex_string <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>project_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>region<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'POSTGRE_SERVER_NAME'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n    postgre_pool <span class=\"token operator\">=</span> sqlalchemy<span class=\"token punctuation\">.</span>create_engine<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"postgresql+pg8000://\"</span><span class=\"token punctuation\">,</span>\n        creator<span class=\"token operator\">=</span>partial<span class=\"token punctuation\">(</span>\n            utils<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">,</span>\n            user<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRE_DB_USER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRE_DB_PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            db<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRE_DB_NAME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            driver<span class=\"token operator\">=</span><span class=\"token string\">\"pg8000\"</span><span class=\"token punctuation\">,</span>\n            connstring<span class=\"token operator\">=</span>postg_connex_string<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<p>We factored out the <code>postgre_pool</code> function into a function called <code>connect</code>. To be used in our <code>create_engine</code> we used the following construct:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">partial<span class=\"token punctuation\">(</span>\n  my_functions<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">**</span>kwargs\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The beauty of partial is that it will passed the <code>function</code> object but also its arguments. It is pretty convenient. Moreover we can use <code>connect</code> for any database and we do not need to use inner functions with handcoded arguments.</p>\n<p>We can do a similar move for the <code>process_bi_tables</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">process_bi_tables</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    region <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"REGION\"</span><span class=\"token punctuation\">)</span>\n    project_id <span class=\"token operator\">=</span> Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"PROJECT_ID\"</span><span class=\"token punctuation\">)</span>\n    postg_connex_string <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>project_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>region<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'POSTGRE_SERVER_NAME'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n    postgre_pool <span class=\"token operator\">=</span> sqlalchemy<span class=\"token punctuation\">.</span>create_engine<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"postgresql+pg8000://\"</span><span class=\"token punctuation\">,</span>\n        creator<span class=\"token operator\">=</span>partial<span class=\"token punctuation\">(</span>\n            utils<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">,</span>\n            user<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRE_DB_USER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRE_DB_PASSWORD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            db<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"POSTGRE_DB_NAME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            driver<span class=\"token operator\">=</span><span class=\"token string\">\"pg8000\"</span><span class=\"token punctuation\">,</span>\n            connstring<span class=\"token operator\">=</span>postg_connex_string<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    tables <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"patients_doctors\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nights\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"users\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"doctors\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sensors\"</span><span class=\"token punctuation\">]</span>\n    views <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nights_view\"</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">with</span> postgre_pool<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> postgre_conn<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> tables <span class=\"token operator\">+</span> views<span class=\"token punctuation\">:</span>\n            logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Processing table : </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            query <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span>read_query<span class=\"token punctuation\">(</span>bucket<span class=\"token operator\">=</span>bucket<span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">=</span>prefix<span class=\"token punctuation\">,</span> filename<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span>\n            postgre_conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n    logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"BI databases updated\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now both <code>bucket</code> and <code>prefix</code> are function parameters. With partial we can use them in our <code>PythonOperator</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> DAG<span class=\"token punctuation\">(</span>\n    dag_id<span class=\"token operator\">=</span><span class=\"token string\">\"pipeline_bi\"</span><span class=\"token punctuation\">,</span>\n    default_args<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"airflow\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    schedule_interval<span class=\"token operator\">=</span><span class=\"token string\">\"0 */3 * * *\"</span><span class=\"token punctuation\">,</span>\n    start_date<span class=\"token operator\">=</span>days_ago<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    catchup<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> dag<span class=\"token punctuation\">:</span>\n    update_bi_tables <span class=\"token operator\">=</span> PythonOperator<span class=\"token punctuation\">(</span>\n        task_id<span class=\"token operator\">=</span><span class=\"token string\">\"update_bi_tables\"</span><span class=\"token punctuation\">,</span>\n        python_callable<span class=\"token operator\">=</span>partial<span class=\"token punctuation\">(</span>\n            process_bi_tables<span class=\"token punctuation\">,</span>\n            bucket<span class=\"token operator\">=</span>Variable<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"BUCKET-AIRFLOW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            prefix<span class=\"token operator\">=</span><span class=\"token string\">\"query/task_bi_processing\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Using partial","date":"September 10, 2023","tags":["Python"]}}},"pageContext":{"id":"989a1861-1c66-5771-b498-6ac8a3ddded7","fields__slug":"/using-partial/","__params":{"fields__slug":"using-partial"}}},"staticQueryHashes":["2750728228"],"slicesMap":{}}